clear; clc;
%%datele numerice
A = [44.363445 26.113015;
44.359452 26.139076;
44.360901 26.130089;
44.362403 26.123089;
44.365975 26.090950;
44.369737 26.089105;
44.385636 26.059393;
44.378352 26.046974;
44.386193 26.077606;
44.379248 26.099150;
44.377019 26.120312;
44.337033 26.146689;
44.383988 26.145767;
44.393794 26.121808;
44.401250 26.098168;
44.394529 26.201010;
44.408025 26.120181;
44.416068 26.113688;
44.425778 26.102295;
44.425796 26.103190;
44.416252 26.083089;
44.403581 26.066926;
44.389785 26.005224;
44.403892 26.021521;
44.398178 26.044341;
44.414885 26.046270;
44.404968 25.990272;
44.413109 26.014802;
44.411915 26.017072;
44.415941 26.015597;
44.418508 26.002314;
44.422216 25.982745;
44.430558 26.086232;
44.427744 26.100968;
44.434337 26.076113;
44.434007 26.059071;
44.445496 26.046257;
44.434875 26.034641;
44.437749 26.014307;
44.441405 26.003688;
44.446332 25.982422;
44.435421 25.958062;
44.429092 26.102444;
44.427684 26.104017;
44.432549 26.103962;
44.429560 26.107329;
44.436092 26.106472;
44.436539 26.101757;
44.437668 26.095055;
44.445334 26.097724;
44.451734 26.085474;
44.445707 26.075102;
44.481635 26.147613;
44.485989 26.113368;
44.496830 26.098813;
44.507808 26.086235;
44.514824 26.114980;
44.538284 26.092608;
44.503307 26.024157;
44.491466 26.014095;
44.488078 26.050176;
44.471273 26.051520;
44.471452 26.000543;
44.475566 26.072153;
44.405916 26.148251;
44.406437 26.202304;
44.414977 26.217733;
44.434083 26.185125;
44.439983 26.184771;
44.436227 26.169045;
44.426799 26.178817;
44.470446 26.176282;
44.462871 26.155643;
44.465017 26.148199;
44.466689 26.156246;
44.448406 26.125918;
44.446500 26.143738;
44.439500 26.150737;
];

x0 = [26.09,26.165,26.015,26.09,26.165,26.218,25.94,26.015,26.09,26.165,26.218,26.015,26.09,26.1654,26.09];
y0 = [44.34,44.34,44.39,44.39,44.39,44.39,44.44,44.44,44.44,44.44,44.44,44.49,44.49,44.49,44.54];

load matrix.mat
for j = 1: length(A(:,2))
    for i = 1: length (x0)
        if matrix(j,i) ~= 0
        matrix_2(j,i) = A(j,1);
        end
    end
end

plot(A(:, 2),  A(:, 1), 'rx')
hold on
plot(x0,  y0, 'bx')
%%algoritm:

min_distance = 1;
cont = 0;
s = 0;

%%calcul constanta lipschitz:
for j = 1:length (x0)
  for i = 1:length (A(:,1))
      norma = sqrt((x0(j) - matrix(i,j))^2 + (y0(j) - matrix_2(i,j))^2);
      s = s + norma * norma;
  end
end

L = s/4;
alfa = 1/L;
%%
   
while min_distance > 0.025 && cont < 10000
    %%Metoda Gradient Descen
    cont = cont + 1;
    
    %derivatele partiale
    fx = zeros (1 , length (x0));
    fy = zeros (1 , length (x0));
    d(cont, length(A(:,1))) = 0;

    %%
    vett0 = [x0; y0];
    
    %1st cycle pentru fiecare statie de incarcare
    for j = 1:length (x0)
        %2nd cycle pentru fiecare terminal
        for i = 1:length (A(:,1))
            if matrix (i,j) ~= 0
                fx(j) = fx(j) + (x0(j) - matrix (i,j))/sqrt((x0(j) - matrix (i,j))^2+(y0(j)-matrix_2(i,j))^2);
                fy(j) = fy(j) + (y0(j) - matrix_2 (i,j))/sqrt((x0(j) - matrix (i,j))^2+(y0(j)-matrix_2(i,j))^2);
                
                d(cont, i) = d(cont, i) + sqrt((x0(j)-matrix(i,j))^2+(y0(j)-matrix_2(i,j))^2);
            end
        end
    
        %anti gradientul
        p=-[fx;fy];
        for i = 1:length(p)
            if p(i) == 0
                p(i) = 0.01;
            end
        end
        
        %noile coordonate pentru statiile de incarcare
        vett1 = vett0  + alfa * p;
        end

        %ri
        x0 = vett1 (1,:);
        y0 = vett1 (2,:);   
        
        %distanta minima dintre statile de incarcare
        for k = 1:length(x0)
            for t = 1:length(x0)
                if k ~= t
                    distance(k,t) = sqrt((x0(k) - x0(t))^2 + (y0(k) - y0(t))^2);
                end
                if k == t
                    distance (k,t) = 5;
                end
            end
        end
        for k = 1:length(x0)
            for t = 1:length(x0)
                if distance(k,t) < min_distance
                    min_distance = distance (k,t);
                end
            end
        end
       
   end

%%
plot (d(:,78))
%%
plot(A(:, 2),  A(:, 1), 'rx');
hold on;
voronoi(x0,  y0, '-g');
